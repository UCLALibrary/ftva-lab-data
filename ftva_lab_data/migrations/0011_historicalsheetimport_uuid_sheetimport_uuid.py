# Generated by Django 5.2.2 on 2025-08-13 20:47

import uuid
from django.db import migrations, models


def generate_uuid_for_existing_records(apps, schema_editor):
    """Generate UUIDs for records that are missing them.

    :param apps: Django apps registry.
    :param schema_editor: Django schema editor.
    """
    # Get the model and database alias using the correct context.
    # See @https://docs.djangoproject.com/en/5.2/ref/migration-operations/#runpython for more info.
    SheetImport = apps.get_model("ftva_lab_data", "SheetImport")
    db_alias = schema_editor.connection.alias

    records_without_uuid = SheetImport.objects.using(db_alias).filter(uuid__isnull=True)
    records_to_update = []
    for record in records_without_uuid:
        record.uuid = uuid.uuid4()
        records_to_update.append(record)

    SheetImport.objects.using(db_alias).bulk_update(
        records_to_update, ["uuid"], batch_size=1000
    )


def reverse_migration(apps, schema_editor):
    """Function to reverse the migration.

    :param apps: Django apps registry.
    :param schema_editor: Django schema editor.
    """
    # Django handles the reverse migration automatically,
    # but needs a function to be defined.
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("ftva_lab_data", "0010_historicalsheetimport_file_type_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="historicalsheetimport",
            name="uuid",
            field=models.UUIDField(default=uuid.uuid4, editable=False),
        ),
        migrations.AddField(
            model_name="sheetimport",
            name="uuid",
            field=models.UUIDField(default=uuid.uuid4, editable=False),
        ),
        # Custom migration operation to add UUIDs to existing records.
        migrations.RunPython(generate_uuid_for_existing_records, reverse_migration),
    ]
